;; This Clojure REPL is divided into two areas, top and bottom, delimited by a line of dashes. The top area shows code that's been executed in the REPL, standard out from running code, and the results of executed expressions. The bottom area allows Clojure code to be entered. The code can be executed by pressing shift+enter.

;; Try it now by typing (+ 1 1) in the bottom section and pressing shift+enter.

;; Working in another Clojure file and sending forms to the REPL is the most efficient way to work. Use the following key bindings to send code to the REPL. See the settings for more keybindings.

;; ctrl-, then b - execute block. Finds the block of Clojure code your cursor is in and executes that.

;; Try it now. Put your cursor inside this block and press ctrl and comma together,
;; release, then press b.
(+ 2 3)

;; ctrl-, s - Executes the selection. Sends the selected text to the REPL.

;; Try it now. Select these three lines and press ctrl and comma together, 
;; release, then press s.
(println "hello 1")
(println "hello 2")
(println "hello 3")

;; You can disable this help text in the settings.
Starting REPL with lein in /Users/sergio/Developer/Pandemic
nREPL server started on port 56341 on host 127.0.0.1 - nrepl://127.0.0.1:56341
user=>
Refreshing code...
:reloading (pandemic.domain.model.infection_card pandemic.domain.model.infection_rate_track pandemic.core pandemic.domain.model.player_card pandemic.domain.model.player pandemic.domain.model.role pandemic.domain.model.city pandemic.domain.model.cure pandemic.domain.model.turn pandemic.domain.model.game pandemic.domain.action.set_up_game pandemic.core-test)
:error-while-loading pandemic.domain.action.set_up_game
java.lang.IllegalArgumentException: No value supplied for key: true, compiling:(pandemic/domain/action/set_up_game.clj:1:1)
Refresh complete
(/ 4 45)
user=> 4/45
(/ 45 4)
user=> 45/4
(quot 45 4)
user=> 11
(def {:a {:b 0}})
user=> CompilerException java.lang.RuntimeException: First argument to def must be a Symbol, compiling:(/private/var/folders/kh/04vzxl4s5fg44d5nq19v5tbm0000gn/T/form-init3477045980947543205.clj:1:5) 
(def a {:a {:b 0}})
user=> #'user/a
(get-in a [:a :b])
user=> 0
(rem 45 5)
user=> 0
(rem 45 4)
user=> 1
(partition 10 (range 20))
user=> ((0 1 2 3 4 5 6 7 8 9) (10 11 12 13 14 15 16 17 18 19))
(partition 3 (range 9))
user=> ((0 1 2) (3 4 5) (6 7 8))
(partition 3 (range 7))
user=> ((0 1 2) (3 4 5))
(partition 3 (range 8))
user=> ((0 1 2) (3 4 5))
(partition 3 1 (range 8))
user=> ((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7))
(partition 3 3 (range 8))
user=> ((0 1 2) (3 4 5))
(partition 3 3 [9 9 9 9] (range 8))
user=> ((0 1 2) (3 4 5) (6 7 9))
(partition-all 3 (range 8))
user=> ((0 1 2) (3 4 5) (6 7))
(partition-all 3 (range 7))
user=> ((0 1 2) (3 4 5) (6))
(partition 3 3 [9 9 9 9] (range 8))
user=> ((0 1 2) (3 4 5) (6 7 9))
(partition 3 3 [9 9 9 9] (range 7))
user=> ((0 1 2) (3 4 5) (6 9 9))
(partition 10 (range 41))
user=> ((0 1 2 3 4 5 6 7 8 9) (10 11 12 13 14 15 16 17 18 19) (20 21 22 23 24 25 26 27 28 29) (30 31 32 33 34 35 36 37 38 39))
(partition-all 10 (range 41))
user=> ((0 1 2 3 4 5 6 7 8 9) (10 11 12 13 14 15 16 17 18 19) (20 21 22 23 24 25 26 27 28 29) (30 31 32 33 34 35 36 37 38 39) (40))
(partition-all 10 (vec (range 41)))
user=> ((0 1 2 3 4 5 6 7 8 9) (10 11 12 13 14 15 16 17 18 19) (20 21 22 23 24 25 26 27 28 29) (30 31 32 33 34 35 36 37 38 39) (40))
(into [] (partition-all 10 (vec (range 41))))
user=> [(0 1 2 3 4 5 6 7 8 9) (10 11 12 13 14 15 16 17 18 19) (20 21 22 23 24 25 26 27 28 29) (30 31 32 33 34 35 36 37 38 39) (40)]
(into [] (partition-all 10 (range 41)))
user=> [(0 1 2 3 4 5 6 7 8 9) (10 11 12 13 14 15 16 17 18 19) (20 21 22 23 24 25 26 27 28 29) (30 31 32 33 34 35 36 37 38 39) (40)]
(partition-all 10 (range 41))
user=> ((0 1 2 3 4 5 6 7 8 9) (10 11 12 13 14 15 16 17 18 19) (20 21 22 23 24 25 26 27 28 29) (30 31 32 33 34 35 36 37 38 39) (40))
(get (partition-all 10 (range 41)) 5)
user=> nil
(get (partition-all 10 (range 41)) 4)
user=> nil
(get (partition-all 10 (range 41)) 2)
user=> nil
(get 2 (partition-all 10 (range 41)))
user=> nil
(nth (partition-all 10 (range 41)))
user=> ArityException Wrong number of args (1) passed to: core/nth  clojure.lang.AFn.throwArity (AFn.java:429)
(nth (partition-all 10 (range 41)) 2)
user=> (20 21 22 23 24 25 26 27 28 29)
(nth (partition-all 10 (range 41)) 4)
user=> (40)
(nth (partition-all 10 (range 41)) 5)
user=> IndexOutOfBoundsException   clojure.lang.RT.nthFrom (RT.java:885)
(nth (partition-all 10 (range 41)) 5 nil)
user=> nil
(map identity '([1 2 3] [4 5 6]) nil)
user=> ()
(map identity '([1 2 3] [4 5 6]) [1 2])
user=> ArityException Wrong number of args (2) passed to: core/identity  clojure.lang.AFn.throwArity (AFn.java:429)
(map identity '([1 2 3] [4 5 6]) '(1 2))
user=> ArityException Wrong number of args (2) passed to: core/identity  clojure.lang.AFn.throwArity (AFn.java:429)
(map #(identity %1) '([1 2 3] [4 5 6]) '(1 2))
user=> ArityException Wrong number of args (2) passed to: user/eval5257/fn--5258  clojure.lang.AFn.throwArity (AFn.java:429)
--------------------
(map #(identity %2) '([1 2 3] [4 5 6]) '(1 2))
