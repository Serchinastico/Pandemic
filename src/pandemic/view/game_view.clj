(ns pandemic.view.game_view
  (:require [clojure.string :as str]
            [lanterna.screen :as screen]
            [lanterna.terminal :as terminal]
            [pandemic.view.video_buffer :as buffer]
            [pandemic.view.lanterna.drawille :as drawille]
            [pandemic.view.lanterna.extensions :as ext]))

(def canvas-width 65)
(def canvas-height 20)
(def buffer-width 130)
(def buffer-height 40)

(def buffer (buffer/get-video-buffer canvas-width canvas-height buffer-width buffer-height))
; (def screen (screen/get-screen :text {:cols 110 :rows 40 :font-size 40}))
; (def terminal (terminal/get-terminal :text {:cols width :rows height}))
(def drawille-canvas (drawille/->canvas
                      (* 2 buffer-width)
                      (* 4 buffer-height)))

(def city-coordinates
  {:san-francisco [11 11]
   :chicago [22 10]
   :montreal [30 10]
   :new-york [36 11]
   :atlanta [25 13]
   :washington [33 13]
   :los-angeles [13 15]
   :mexico-city [19 17]
   :miami [28 16]
   :bogota [26 20]
   :lima [26 24]
   :santiago [29 29]
   :buenos-aires [36 28]
   :sao-paulo [40 26]
   :london [56 8]
   :essen [62 8]
   :st-petersburg [70 7]
   :madrid [56 12]
   :paris [59 10]
   :milan [62 11]
   :algiers [60 13]
   :istanbul [64 12]
   :moscow [68 11]
   :cairo [68 14]
   :baghdad [74 14]
   :tehran [80 12]
   :riyadh [76 16]
   :karachi [10 10]
   :delhi [10 10]
   :mumbai [10 10]
   :chennai [10 10]
   :kolkata [10 10]
   :lagos [10 10]
   :khartoum [10 10]
   :kinshasa [10 10]
   :johannesburg [10 10]
   :beijing [10 10]
   :seoul [10 10]
   :shangai [10 10]
   :tokyo [110 10]
   :bangkok [10 10]
   :hong-kong [10 10]
   :taipei [10 10]
   :osaka [110 13]
   :jakarta [10 10]
   :ho-chi-minh-city [10 10]
   :manila [10 10]
   :sydney [10 10]})

(defn coordinate->drawille
  [[x y]]
  [(* 2 x) (* 4 y)])

(defn city->coordinates
  [city-name]
  [(first (get city-coordinates city-name))
   (second (get city-coordinates city-name))])

(defn routes-from-city
  [[city-name city]]
  (let [from (city->coordinates city-name)]
    (map #(let [to (city->coordinates %)]
            {:from from :to to})
         (:neighbors city))))

(defn get-routes
  [cities]
  (flatten
   (map routes-from-city cities)))

(defn render-cities
  [cities]
  ; (ext/rect terminal [0 0] [130 35])
  (let [b1 buffer
        b2 (buffer/start-buffer b1)
        b3 (buffer/put-strings b2 ["⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡀⢀⣀⠀⢠⡤⠤⠖⢒⣒⡶⣾⣿⠧⠔⠒⠚⠋⠉⠉⠉⠉⠉⠙⢒⡶⠄⠀⠀⠀⠀⠀⣀⣤⣤⣤⠀⠀⠀⠀⠠⡤⠠⡶⠤⠀⠀⠀⠀⠀⠀⠀⢠⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣺⢽⣾⠿⠙⢾⣏⣟⣺⣽⣦⠔⠉⠛⠿⠛⢲⡀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠃⠀⠀⠀⠀⠀⠀⠀⠑⠴⠉⠃⠀⠀⠀⠀⠀⠀⠀⠀⣠⡶⠶⠓⠀⣀⠀⡀⣠⠴⠚⠚⠉⠉⠉⢩⣦⣀⣀⣀⣀⣀⠀⢰⣶⣀⡀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⢀⡠⠔⠲⠴⠒⠒⠦⡤⠴⠤⠤⠤⠼⣟⠲⣤⣅⣩⣏⣤⡞⢯⢘⣟⡥⣄⠀⠙⢢⣀⠀⠀⢸⡄⠀⠀⠀⠀⠀⣀⡤⠤⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠴⠒⠒⠲⠤⠤⢤⡀⣀⣜⣾⣄⡤⠤⢼⡅⡯⡉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠛⠋⠉⠉⠉⠑⠒⠒⠤⠤⠴⢶⠶⠦⠤⢤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⢰⣒⠒⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⢉⡤⠤⢮⠿⣁⣤⣟⢁⣸⠗⠊⠁⠀⡏⠀⢀⡤⠤⠒⠋⠁⠰⠶⠶⠶⠀⠀⠀⠀⠀⠀⠀⣀⠞⠁⣀⢶⠆⠀⠀⢲⡶⠟⠛⠉⠀⠀⠀⢠⠊⠀⠓⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⠛⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⣔⡒⠋⣠⠤⠤⠖⠒⣲⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠋⠀⠀⢀⡼⠁⠙⣦⣹⣇⠀⠀⠀⠀⠳⠤⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠰⣉⣡⡄⠀⡇⢹⡴⠶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣸⠗⢹⠄⡖⠒⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⣠⠔⠋⠉⠉⠀⠀⠀⠀⠐⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠓⠦⣄⢠⠴⠃⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⡧⣷⠀⠀⢸⣹⣯⣴⣡⠿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢧⣀⡈⡁⠀⠀⠫⣄⢸⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠧⠋⠀⠀⠀⣠⣤⠤⡴⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠺⠒⡿⣤⣿⠜⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠶⠤⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢻⣦⡀⠀⠈⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣘⠷⠚⠒⠚⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠺⣍⠁⠀⠀⣀⣠⡀⠀⠀⠀⠀⠀⣠⡀⣀⠀⠀⠀⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠙⡧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠔⠁⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠛⠒⠋⣠⠔⠚⡍⠻⣞⣲⡄⢀⣀⣼⡡⠭⣍⣉⡟⠓⠚⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢀⡤⠼⠀⠰⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢯⣤⣄⡴⣃⣠⡤⣟⠀⠼⠋⠢⣜⡾⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⢷⠳⡌⢣⡀⠀⢠⠟⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡖⠉⠉⠉⠁⠀⠀⠸⢄⣀⡀⢀⣈⡙⠋⠁⠀⡽⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢢⡘⠖⢁⢴⡾⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡆⠀⠀⠀⠀⢀⡤⠤⠤⠚⠓⠲⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠋⠀⠈⠛⠉⠉⣧⠀⠀⠀⠀⠀⡖⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡜⣄⠀⠀⢠⡏⠀⠀⠀⠀⠀⠘⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡤⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢣⡣⡀⠀⠀⠀⠈⠢⠽⢳⠦⣄⡤⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠋⠘⡆⠀⠈⡇⠀⢀⢤⠀⠙⠛⠳⠦⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠱⣵⡀⠀⠀⠀⠀⠀⢀⡵⠀⠀⠀⠑⠲⡆⠀⠀⠀⠀⢠⠒⠖⣆⠀⠀⠀⠀⢠⣶⣴⠒⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠓⠦⢤⣉⡉⠁⢎⢤⡀⠀⠘⠃⠉⠉⠁⠛⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡄⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠳⡄⠀⢠⠔⠁⠀⠀⠻⡤⣄⠀⠀⠀⠻⡁⠀⠀⠀⢺⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠓⠦⢄⡠⡇⠀⠀⢀⠤⠦⡤⠤⢤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⠶⠾⠥⡄⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⢹⠀⠀⠀⠀⠀⠀⠸⣠⠦⡀⠀⣹⠀⠀⠀⣀⢿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠶⡶⠃⠀⠀⠀⠀⠀⠓⠤⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠒⡟⡆⠀⠀⠀⠀⠀⡀⢸⢆⠘⠋⠀⠀⠀⢐⡋⢨⣿⣳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠲⠤⠖⠚⠉⠉⠓⢢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠻⣬⣆⢣⠀⠀⢀⣠⠋⡟⠀⢈⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠲⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⢤⠿⣄⣴⡉⠀⢰⢃⣾⡿⠃⢿⢠⣦⡀⣀⣀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠓⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢦⠏⠁⠉⠙⠊⠠⡿⡷⠀⠛⠁⠙⠟⢄⢸⠙⢢⣀⣽⡶⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⢚⡚⠉⢷⠍⠀⠀⠙⠖⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⢀⣼⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢤⣠⠎⠉⣱⠀⢸⢹⡀⠀⠀⠀⠀⠀⠀⠀⢠⡀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢲⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠋⠀⡎⠉⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⠎⠀⠁⠀⠀⠈⠓⠚⠀⢇⠀⠀⠀⠀⠀⠀⠀⠈⠛"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠱⡀⠀⠀⠀⠀⠀⠀⠀⢸⠁⠀⠀⣇⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⠀⠈⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⢸⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄⠀⠀⠀⠀⠀⢠⠞⠀⠀⠀⠸⠜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠀⢀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⢀⣀⡤⢤⣀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠃⠀⠀⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠶⡚⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠦⠴⠶⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠧⠞⠉⠀⠀⠀⠈⠳⢤⠀⠀⠀⠀⡰⠋⠀⠀⠀⠀⠀⠀⢀⡶⡄"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡀⠀⢀⡤⠎⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⣲⡖⠚⠁⠀⠀⠀⠀⠀⠀⢀⣴⡡⠟"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⠀⢈⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠜⠁⠀⠀⠀⠀⠀⢀⣠⠖⠋⠁⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠈⣢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠁⠀⠀⠀⠀⠀"
                                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢤⡘⢄⡀⠺⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"]
                               2 3)
        canvas-updated (reduce
                        (fn [canvas route]
                          (drawille/line canvas (coordinate->drawille (:from route)) (coordinate->drawille (:to route))))
                        drawille-canvas
                        (get-routes cities))
        b4 (buffer/put-strings b3 (str/split (drawille/canvas->str canvas-updated) #"\n") 0 0)
        b5 (reduce (fn [buffer [key city]]
                     (let [color (:color city)
                           [x y] (get city-coordinates key)]
                       (buffer/put-string buffer "●" x y :color color)))
                   b4
                   cities)]
    (buffer/flush-buffer b5)

    (loop [video-buffer b5]
      (let [key (terminal/get-key-blocking (:terminal video-buffer))
            new-video-buffer (case key
                               :up (buffer/translate-canvas video-buffer 0 -5)
                               :left (buffer/translate-canvas video-buffer -10 0)
                               :right (buffer/translate-canvas video-buffer 10 0)
                               :down (buffer/translate-canvas video-buffer 0 5)
                               (System/exit 0))]
        (buffer/flush-buffer new-video-buffer)
        (recur new-video-buffer)))))

(defn render
  "Renders the state of the game"
  [game]
  (render-cities (:cities game)))
